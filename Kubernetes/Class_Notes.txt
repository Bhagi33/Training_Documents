


#########################
Day - 7 | 29th Aug. 2024
#########################
		
	Kubernetes :::
	
		- Kubernetes is Open-Source Container Orchestration Tool 
		- Used to create replicas of containers 
		- Used for any type of Container
		- It can perform Auto-scaling / load-balancing!	
		- Self-Healing
		- Effecive External Volume Allocations 
		- Perform Deployments/Upgrade/Downgrade the Application Services without any Downtime!
			- Can easily achieve Continuous Deployment
			
		Micro-Service Based Applications :::
		
	
	Kubernetes Architecture
	
	Kubernetes Components
	
	Kubernetes Concepts
	
		- Kubernetes Cluster
		- Pods 
		- Controller Objects
			- Replication Controller 
			- Replicaset 
			- Daemenset
			- Deployment
		- Services 
			- NodePort Service 
			- ClusterIP 
			- Load Balancer 
		- Volumes 
		
		
	Open-Source Kubernetes 
	
	
	Managed Services 
	
		AWS - ECS/ECR/EKS
		
		AZURE - ACS/ACR/AKS 
		
		GCP - GCE/GCR/GKE
		
		
	Kubernetes Architecture :::
	
	Kubernetes Components	
	
		API Server 
		ETCD 
		Scheduler
		Controller Object 
		
		Kubelet 
		KubeProxy
		CRI - Container-D 
	
	
	Non-Prod 												Prod 
	
																Production Servers 
																
																
	Kubernetes_Master (Control-Plane)
		Kubernetes_WorkerNode1
		Kubernetes_WorkerNode2
		Kubernetes_WorkerNode3
		

	Kubernetes Concepts/Terminologies :::
	
		kubectl 				# Command Line Utility to interact with Kubernetes Master 
		
		Kubernetes_Cluser		# Collection of WorkerNodes 		
		
		Pods					# Atomic Unit of Schedule 
		
		
	Working with Kubernetes ::::
	
	
	Install and Configure Kubernetes Cluster 
	
		Kubernetes_Master (Control-Plane)
			Kubernetes_WorkerNode1
			Kubernetes_WorkerNode2	
			
			
	kubeadm - Is command Line Utility used to config and setup the Kubernetes Master & Attache WorkNodes 
	
	
		1. Launch 3 VMs 
		2. Enable the required ports - using security group 
		3. setup host name 
		4. Packages/Commands to be executed on all Master & Worker Nodes
			- install docker 
			- cri 
			- kubeadm
			- kubelet
			- kubectl 
			- enable kubelet 
			
		5. Packages/Commands to be executed only on Master/control plane
			- kubeadm init 
			- setup access to kubectl 
			- Install Network Plugins used by Kube-proxy to enable pod networking 
			- verify the nodes/pods ....
			
		6. Commands to be executed only on WorkerNodes
			- kubeadm join 
			
		Kubernetes Dashboard




#########################
Day - 8 | 2nd Sep. 2024
#########################
		
	Kubernetes Concepts
	
		- Kubernetes Cluster		--> Is a collection of Worker Nodes!
		- Pods 
		- Controller Objects
			- Replication Controller 
			- Replicaset 
			- Daemenset
			- Deployment
		- Services 
			- NodePort Service 
			- ClusterIP 
			- Load Balancer 
		- Volumes 
			- Hostpath Volume
			- Persistant Volume
			- Persistant Volume Claim
			
			
	Case Study :
	
		Jenkin - GIT/Docker/Kubernetes

	AWS DevOps Services
	
	Azure DevOps Services
	
	
	How to Expose pods ?
	
		Services 
		
			- NodePort Service 
				- Is used to expose the pods to internet 
				- Node Port Range : 30000 to 32767 
				
				
	- Controller Objects
		- Replication Controller 
		- Replicaset 
		- Daemenset
		- Deployment

			Replicas of Pod 
			
			Launch a website :
			
				1000 Users can access at the same time 
				
				100 Instance of Pods 
				
				
				5000
				
				Scale-Up 
				
				Scale-Down 
				

		- Daemenset

				
		- Deployment :::

			Is used to Deploy the containerised workloads in kubernetes
			It can perform, New deployments,
			Existing Application Upgrade / Downgrade 
			Rollback 
			Scale-up/Scale-down
			
			It Create Deploy Object 
			It will automatically creates the Replicaset 
			Based on Replicaset, Pod replicas will be created
			
			All these things can be achieved without any downtime. 
			

			- Uses the RollingUpdate Deployment Strategy :	
			
			
			Deployed Pods :
			
			3 Instances of Pods ::
			
				pod1	--> v1.0 
				pod2 	--> v1.0
				pod3	--> v1.0
				
			Upgrade the app to v2.0 ::
			
				pod1	--> v1.0 	==> 	v2.0	

	- Services 
		- NodePort Service
		
		- ClusterIP 
		- Load Balancer 
		
			Routing Rules ::  IGRESS Rules 		-==> It is actually used to reduce the load balancer service 
			
				- Simple Routing 
				
				- Path Based Routing 
				
				- Host Based Routing 
		

		Path Based Routing  :::		
		
							Inbox						sent 							trash 
		www.gmail.com 	--> www.gmail.com/inbox			www.gmail.com/sent				www.gmail.com/trash
		
		

		Host Based Routing 
				
		www.google.com :::
			
		www.gmail.google.com 
						Path Based Routing  :::		
		
							Inbox						sent 							trash 
		www.gmail.com 	--> www.gmail.com/inbox			www.gmail.com/sent				www.gmail.com/trash

		www.drive.google.com 
		www.translate.google.com 
		www.gcloud.google.com 
		
		
	- Volumes ::::
		
		--> Volumes are used to maintain the state of application services 
		--> It is used to maintain the persisant data throughout the execution of Application Service and beyond the execution
		
		Pod --> 500GB of Volume ??
		
		Storage Servers 
		
		
		deployed a pod in workerNode1 -- hostpath volume will be created 
		
Next :::		
		ConfigMap Volume 
		Secret Volume 
		Namespaces 
		
		Integrate Kubernetes Pods Deployment with CICD Pipeline 

#########################
Day - 9 | 3rd Sep. 2024
#########################

	Namespaces 
	
	CICD Pipeline using Jenkins,Docker,Kubernetes 
	
	Introduction to Azure DevOps Service 
	


	Kubernetes Namespaces 
			--> These are the logical partitioning of the Kubernetes Cluster 
			
	default
	kubesystem
	kube-flannel 
	
	Non-Prod 
		DEV/QA/UAT
	
	
	Non-Prod 																		Prod 
	                                                                                
	Kubernetes_Master                                                               Kubernetes_Master
		Kubernetes_WorkerNode1                                                      	Kubernetes_WorkerNode1
		Kubernetes_WorkerNode2                                                      	Kubernetes_WorkerNode2
		Kubernetes_WorkerNode3                                                      	Kubernetes_WorkerNode3
		
		
	Namespace 1 : DEV 
	Namespace 2 : QA1,QA2 
	Namespace 3 : UAT  
	
	
	Prod :::
	
		Rolling Update Strategies :::
		
		Blue-Green Deployments strategies :::
		
		Major Releases !
		
		Prod :::
		
			(Blue)Prod_Servers(Active_Servers-5servers)		---> LIVE Application   ---> webapp_V1.0 /v1.1 /v1.2 - Shut-down 
								
			
			webapp_v2.0
			
			(Green)Prod_Servers(Passive_Servers-5servers)		---> Deploy new version ---> webapp_v2.0 --> ACTIVE 
			
			Once Passive_Servers responds as expected with webapp_v2.0
		

		Blue Green Deployment using Kubernetes :::
		
			
		Prod 			LIVE Prod Environment - webapp_V1.0
		
		Namespace-Active_v1.0		Drop this NameSpace upon testing Active_v2 

		Kubernetes_Master
			Kubernetes_WorkerNode1
			Kubernetes_WorkerNode2
			Kubernetes_WorkerNode3
			
		Namespace-Active_v2.0 - webapp_V1.0
		
	
	Volumes :
		ConfigMap 		
		Secret 
		
		
	Package Manager for Kubernetes Cluster :::
	
		HELM is Package Manager for Kubernetes
		
		GUI Based Kubernetes Dashboards can be used to Manage the Kubernetes
	
	Install Helm package manager :
	
		https://github.com/helm/helm/releases
	
	
	
	
	Application Deployment to Kubernetes Cluster using CICD Pipeline 
		
	
	1. Source Code Repository 
	
	
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loksai-eta-deploy
  labels:
    app: loksai-eta-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: loksai-eta-app
  template:
    metadata:
      labels:
        app: loksai-eta-app
    spec:
      containers:
      - name: loksai-eta-container
        image: loksaieta/loksai-eta-app
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: loksai-eta-np-service
  labels:
    app: loksai-eta-app
spec:
  selector:
    app: loksai-eta-app

  type: NodePort
  ports:
  - nodePort: 31028
    port: 8080
    targetPort: 8080

pipeline {

    agent { label 'pwcslave1' }

	environment {	
		DOCKERHUB_CREDENTIALS=credentials('dockerloginid')
	}
	
    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM Checkout'
				git 'https://github.com/Edu-TCS-DevOps-Aug21/java-mvn-springbootapp.git'
            }
        }
        stage('Application_Build') {
            steps {
                echo 'Perform Maven Build'
				sh 'mvn -Dmaven.test.failure.ignore=true clean package'
            }
        }
        stage('Build Docker Image') {
            steps {
				sh 'docker version'
				sh "docker build -t loksaieta/loksai-eta-app:${BUILD_NUMBER} ."
				sh 'docker image list'
				sh "docker tag loksaieta/loksai-eta-app:${BUILD_NUMBER} loksaieta/loksai-eta-app:latest"
            }
        }

		stage('Login2DockerHub') {

			steps {
				sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
			}
		}
		stage('Publish_to_Docker_Registry') {
			steps {
				sh "docker push loksaieta/loksai-eta-app:latest"
			}
		}
		stage('Deploy to QA-Kubernetes') {
            steps {
				script {
				sshPublisher(publishers: [sshPublisherDesc(configName: 'PoW-Kubernetes', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'kubectl apply -f k8sdeploy.yaml', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '*.yaml')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
			}	
            }
		}
		stage('Automated QA Testing') {
            steps {
				script {
				
				success = 'yes'

			}	
            }
		}
		stage('Deploy to Prod-Kubernetes') {
			when-expression(success == 'yes'){
            steps {
				script {
				sshPublisher(publishers: [sshPublisherDesc(configName: 'Kubernetes_Master', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'kubectl apply -f k8sdeploy.yaml', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '*.yaml')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
			}	
            }
		}
		}
    }
}	
		

	
	Infra-Structure ::
	

	 	Jenkins Master Node 		==> Create Jenkins Jobs & Schedule to run in slave nodes 
			Slave_Node1 (Build Server)	===> Actual Build Happens  - Java Build & Docker Build
		Kubernetes_Master
			Kubernetes_WorkerNode1
			Kubernetes_WorkerNode2	
		
	Publish over ssh plugins! 
		
		kubectl apply -f k8sdeploy.yaml			# To Create and replace 
		
		kubectl create -f k8sdeploy.yaml		# To Create New Object 
	


	Build Periodic :
		- This will trigger the jenkins job based on the crontab schedule.
		- Used for any process automation
		
		Eg.: 	Periodic Back-up of workspace/artifacts
				Periodic Clean-up of Workspace directories 
	
	Github Webhook 
		- This is to perform continuous Deployment 
		- For every commit in remote repository, the CICD pipeline gets triggered 
		
	Poll SCM 		
		- This will trigger the jenkins job based on the crontab schedule only if there is any changes committed in the source code repository 
		
		Test Cycle ::
		
		8AM - 12PM - 3PM  ==> QA Testing 
		
	
	Introduction to Azure DevOps Service :::

		

		- Azure Boards 		--> This is based on the AGILE Methodologies - To create User Stories, 
							Is a ALM Tool 
							
		- Azure Repos 		==> can be compared with github repositories
		
		- Azure Pipelines 	*.yaml Scripting 
		
			- Build Pipeline 
			- Release Pipeline 
		
		- Azure Artifacts
		
		- Azure Test 
		
		- Infra-Structure Creation - Azure Resource Manager 
	
